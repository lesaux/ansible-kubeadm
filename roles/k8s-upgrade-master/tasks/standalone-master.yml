
- name: Single Master - Upgrade kubeadm binary 
  when:
    - upgrade_environment
  when:
    - "groups['masters'][0] == inventory_hostname"
  become: true
  shell: |
     export VERSION=$(curl -sSL https://dl.k8s.io/release/stable.txt) # or manually specify a released Kubernetes version
     export ARCH=amd64
     curl -sSL https://dl.k8s.io/release/${VERSION}/bin/linux/${ARCH}/kubeadm > /usr/bin/kubeadm
     chmod a+rx /usr/bin/kubeadm

- name: Single Master - Plan the cluster upgrade
  when:
    - upgrade_environment
    - "groups['masters'][0] == inventory_hostname"
  become: true
  shell: |
    kubeadm upgrade plan | grep "kubeadm upgrade apply"
  register: upgrade_plan

- name: Single Master - Upgrade command
  when:
    - upgrade_environment
    - "groups['masters'][0] == inventory_hostname"
  become: true
  set_fact: 
    upgrade_command: "{{ upgrade_plan.stdout_lines | last }} -y"

- name: Single Master - run the upgrade command
  when:
    - upgrade_environment
    - "groups['masters'][0] == inventory_hostname"
  command: "{{ upgrade_command }}"

- name: Single Master - drain the master node
  when:
    - upgrade_environment
    - "groups['masters'][0] == inventory_hostname"
  shell: |
    kubectl drain {{ ansible_hostname }} --delete-local-data --ignore-daemonsets

- name: Single Master - pause after the drain
  pause:
    seconds: 120
    prompt: "Waiting 120 seconds after node being drained"
  when: 
    - reset_environment
    - "groups['masters'][0] == inventory_hostname"

- name: Single Master - upgrade kubeadm, kubectl and kubelet from apt
  when:
    - upgrade_environment
    - "groups['masters'][0] == inventory_hostname"
  apt:
    name: "{{ item }}"
    update_cache: yes
    force: yes
    state: latest
  become: true
  with_items:
    - kubelet
    - kubeadm
    - kubectl

- name: Single Master - uncordon master node
  when:
    - upgrade_environment
    - "groups['masters'][0] == inventory_hostname"
  shell: |
    kubectl uncordon {{ ansible_hostname }}

- name: Single Master - wait some time after the uncordon
  pause:
    seconds: 120
    prompt: "Waiting 120 seconds after node being uncordoned"
  when:
    - reset_environment
    - "groups['masters'][0] == inventory_hostname"
